<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<!--     Scans the classpath for annotated components that will be auto-registered as  -->
<!--     Spring beans. By default, the Spring-provided @Component, @Repository,  -->
<!--     @Service, and @Controller stereotypes will be detected. -->
<!--     Note: This tag implies the effects of the 'annotation-config' tag, activating @Required, -->
<!--     @Autowired, @PostConstruct, @PreDestroy, @Resource, @PersistenceContext and @PersistenceUnit -->
<!--     annotations in the component classes, which is usually desired for autodetected components -->
<!--     (without external configuration)       -->
    <context:component-scan base-package="com.fwb.jbulletin">
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>

<!--       Activates various annotations to be detected in bean classes: Spring's @Required and -->
<!--     @Autowired, as well as JSR 250's @PostConstruct, @PreDestroy and @Resource (if available), -->
<!--     JAX-WS's @WebServiceRef (if available), EJB3's @EJB (if available), and JPA's -->
<!--     @PersistenceContext and @PersistenceUnit (if available). Alternatively, you may -->
<!--     choose to activate the individual BeanPostProcessors for those annotations. -->
<!--     Note: This tag does not activate processing of Spring's @Transactional or EJB3's -->
<!--     @TransactionAttribute annotation. Consider the use of the <tx:annotation-driven> -->
<!--     tag for that purpose. -->

<!--     RequiredAnnotationBeanPostProcessor instance will automatically get registered -->
<!--     AutowiredAnnotationBeanPostProcessor instance will automatically get registered -->
      <context:annotation-config />


<!-- ********************************************************************************************* -->
<!-- 		Entity Manager and tranasaction manager section -->
<!-- ********************************************************************************************* -->

<!--     to create a localEntityManagerFactoryBean who is responsible of creating an EntityManager -->
<!--     work with @PersistenceContext annotation, need the follow dependencies : -->
<!--     spring-orm-3.1.2.RELEASE.jar -->
<!--     spring-jdbc-3.1.2.RELEASE.jar -->
<!--     spring-dao-2.0.8.jar     -->
    <bean id="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean" >
        <property name="persistenceUnitName" value="postgreSqlDatabase" />
    </bean>

<!--    Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
        p:entityManagerFactory-ref="entityManagerFactory" />
        
<!--     to wrap an EntityManager with a Transaction manager, need the follow dependencies : -->
<!--     work with @Transaction -->
<!--     spring-tx-3.1.2.RELEASE.jar -->
<!--     spring-aop-3.1.2.RELEASE.jar -->
<!--     aopalliance.jar -->
<!--     cglib-nodep-2.2.3.jar -->
<!--     Indicates that transaction configuration is defined by Java 5 -->
<!--     annotations on bean classes, and that proxies are automatically -->
<!--     to be created for the relevant annotated beans. -->
<!--     The default annotations supported are Spring's @Transactional -->
<!--     and EJB3's @TransactionAttribute (if available). -->
<!--     Transaction semantics such as propagation settings, the isolation level, -->
<!--     the rollback rules, etc are all defined in the annotation metadata. -->
    <tx:annotation-driven transaction-manager="transactionManager" />



<!-- ********************************************************************************************* -->
<!-- 	cache Manager use by the Spring Application section -->
<!-- ********************************************************************************************* -->
	
	<cache:annotation-driven cache-manager="cacheManager" />

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		p:cache-manager-ref="ehcache" />

<!-- 		need dependency : spring-context-support-3.2.3.RELEASE.jar from Spring 3.2-->
<!--  		because org.springframework.cache.ehcache.EhCacheManagerFactoryBean was deplaced  -->
<!-- 		from spring-context into spring-context-support -->
<!-- 		Warning : EhCacheManagerFactoryBean may be a singleton, but it's building multiple CacheManagers and trying to give them  -->
<!-- 		the same name. That violates Ehcache 2.5 semantics. -->
<!-- 		Versions of Ehcache before version 2.5 allowed any number of CacheManagers with the same name  -->
<!-- 		(same configuration resource) to exist in a JVM. -->
<!-- 		Ehcache 2.5 and higher does not allow multiple CacheManagers with the same name to exist in the same JVM. -->
<!-- 		CacheManager() constructors creating non-Singleton CacheManagers can violate this rule -->
<!-- 		Tell the factory bean to created a shared instance of the CacheManager in the JVM by setting the shared property to true. -->
<!-- 		http://stackoverflow.com/questions/10013288/another-unnamed-cachemanager-already-exists-in-the-same-vm-ehcache-2-5 -->
	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		p:config-location="classpath:ehcache.xml" p:shared="true" /> 
 
</beans>